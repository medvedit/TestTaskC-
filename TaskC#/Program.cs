// // See https://aka.ms/new-console-template for more information
// {
//     Console.WriteLine("Hello, World!");
//     Console.WriteLine("Hello1 'A'");
// }

// Console.WriteLine("Введите ваше имя");
// Console.WriteLine($"Ваше имя ::: {Console.ReadLine()}");

// Console.WriteLine(true); // Да
// Console.WriteLine(false); //Нет

// //Целочисленные литералы:==================================
// // Вывод числа из двоичной системы в десятичную.
// Console.WriteLine(0b100001);    // 33

// //Вывод числа из шестнадцатеричной системы в десятичную.
// Console.WriteLine(0xFF);    // 255

// //Вещественные литералы:===================================
// //Вещественные литералы могут определяться в экспоненциальной форме MEp,
// //где M — мантисса, E - экспонента, которая фактически означает
// //"*10^" (умножить на десять в степени), а p — порядок. Например:

// Console.WriteLine(3.2e3);   // по сути равно 3.2 * 10<sup>3</sup> = 3200
// // Или
// Console.WriteLine(1.2E-1);  // равно 1.2 * 10<sup>-1</sup> = 0.12
// //========================================================================
// // Для вывода на экран целочисленного литерала в необходимой системе счисления можно пользоваться
// // методом ToString(value, base) класса Сonvert, где value - число в 2-ой, 10-ой, 16-ой системе счисления,
// // base - основание системы счисления в которой нужно вывести число на экран (2, 8, 10, 16). Примеры:
// Console.WriteLine(Convert.ToString(161, 2)); //Вывод на экран (с 10-ой в 2-ую): 10100001
// Console.WriteLine(Convert.ToString(0b10100001, 8)); //Вывод на экран (с 2-ой в 8-ую): 241
// Console.WriteLine(Convert.ToString(161, 16)); //Вывод на экран(с 10-ой в 16-ую): a1
// Console.WriteLine(Convert.ToString(0xa1, 10)); //Вывод на экран(с 16-ой в 10-ую): 161
// //=========================================================================
// string name = "Vasya";
// int a = 25;
// int b = 10;
// Console.WriteLine(name + a + b);// выводит Vasya2510
// Console.WriteLine(a + b); // выводит 35
// Console.WriteLine(name + (a + b)); // Vasya35
// // Если в выражении используются числовые типы вместе со строковыми с помощью операции "+" - то
// //она работает не как сложение, а как конкатенация строк и
// //компилятор преобразует числовые переменные в строки.
// //============================================================================
// string name1 = "Tom";
// int age = 34;
// double height = 1.7;
// Console.WriteLine($"Имя: {name1}  Возраст: {age}  Рост: {height}м"); //Имя: Tom  Возраст: 34  Рост: 1,7м
// //Здесь мы видим, что строка в Console.WriteLine содержит некие числа в фигурных скобках: {0}, {1}, {2}.
// //Это плейсхолдеры, вместо которых при выводе строки на консоль будут подставляться некоторые значения.
// //Подставляемые значения указываются после строки через запятую.

// // ИЛИ

// string name2 = "Tom";
// int age2 = 34;
// double height2 = 1.7;                //                  {0}    {1}     {2}
// Console.WriteLine("Имя: {0}  Возраст: {2}  Рост: {1}м", name2, height2, age2); //Имя: Tom  Возраст: 34  Рост: 1,7м
// //При этом важен порядок подобных плейсхолдеров.
// //Например, в данном случае после строки первой указана переменная name, потом height и потом age.
// //Поэтому значение переменной name будет всавляться вместо первого плейсхолдера - {0} (нумерация начинается с нуля),
// //height - вместо {1}, а age - вместо {2}. Поэтому в итоге пи выводе на консоль строка.
// //===========================================================================

// //Консольный ввод:
// Console.Write("Введите свое имя: ");
// string? name4 = Console.ReadLine(); //string? - (?) означает что значение string может хранить значение null.
// Console.WriteLine($"Привет {name4}");
// // ОТВЕТ Введите свое имя: robert
// //       Привет robert
// //Однако, может возникнуть вопрос, как нам быть, если, допустим, мы хотим ввести возраст в переменную типа int
// //или другую информацию в переменные типа double или decimal?
// //По умолчанию платформа .NET предоставляет ряд методов,
// //которые позволяют преобразовать различные значения к типам int, double и т.д. Некоторые из этих методов:

// //Convert.ToInt32() (преобразует к типу int)
// //Convert.ToDouble() (преобразует к типу double)
// //Convert.ToDecimal() (преобразует к типу decimal)

// Console.Write("Введите имя: ");
// string? name5 = Console.ReadLine();

// Console.Write("Введите возраст: ");
// int age3 = Convert.ToInt32(Console.ReadLine()); // считывание с консоли и конвертация в тип int.

// Console.Write("Введите рост: ");
// double height3 = Convert.ToDouble(Console.ReadLine()); // ...

// Console.Write("Введите размер зарплаты: ");
// decimal salary = Convert.ToDecimal(Console.ReadLine()); // ...

// Console.WriteLine($"Имя: {name5}  Возраст: {age3}  Рост: {height3}м  Зарплата: {salary}$");
// // ОТВЕТ:  Введите имя: Robert
// //         Введите возраст: 18
// // .       Введите рост: 184,35
// // .       Введите размер зарплаты: 5385,43
// // .       Имя: Robert  Возраст: 18  Рост: 184,35м  Зарплата: 5385,43$

// //Ведь если ввести туда символ или строку - появляется ошибка, как обезопасить программу чтобы пользователь мог только вводить числа,
// //а при введении любых других символов выводилось сообщение о некорректном формате или что-то типа того?
// string? Str1;
// decimal Value1 = 0;
// bool IsError = true;
// char Separator = System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator[0];
// char NoSeparator = Separator == '.' ? ',' : '.';
// do // Цикл до корректного ввода или отказа (пустая строка)
// {
//     Console.WriteLine("Введите число : ");
//     Str1 = Console.ReadLine();
//     if (Str1 == null || Str1 == "")
//     {
//         Console.WriteLine("Не хотите - как хототите.");
//         return;
//     }
//     // Замена на нужный разделитель десятичной части
//     if (Str1.Contains(NoSeparator))
//         Str1 = Str1.Replace(NoSeparator, Separator);

//     // Попытка преобразования
//     try
//     {
//         Value1 = Convert.ToDecimal(Str1);
//         IsError = false;
//     }
//     catch (System.FormatException) { Console.WriteLine("Неверный формат.\n"); }
//     catch (System.OverflowException) { Console.WriteLine($"Введено слишком большое, либо слишком малое число для типа {Value1.GetType()}.\n"); }

// } while (IsError);
// Console.WriteLine($"Введено число: {Value1}");

// //=====================================================================================
// //Инкремент бывает префиксным:===
// int x1 = 5;

// int z1 = ++x1; //++x - сначала значение переменной x увеличивается на 1,
// //а потом ее значение возвращается в качестве результата операции.

// Console.WriteLine($"{x1} - {z1}");


// //постфиксный инкремент:===
// int x2 = 5;

// int z2 = x2++; // x++ - сначала значение переменной x возвращается в качестве результата операции,
// // а затем к нему прибавляется 1.

// Console.WriteLine($"{x2} - {z2}");
// // Созначением --х работает так же.

// // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// // Раз и навсегда запомнить, и не путать префиксный и постфиксный инкремент поможет такой пример:
// int x = 2;
//  x = x++ + ++x; //   или   х=(2+(2+1))+1  Почитать можно тут + комментарии! : https://metanit.com/sharp/tutorial/2.3.php
// Console.WriteLine($"x = {x}");  // x = 6
// // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

// Логические операции=======================================================================================================================

// //  &   (логическое умножение) если в обоих числах 1, то 1, иначе 0 -----------!!!!!!!!!!!!!!!!----------
// int x1 = 2; //010
// int y1 = 5; //101
// Console.WriteLine(x1 & y1); // выведет 0

// int x2 = 4; //100
// int y2 = 5; //101
// Console.WriteLine(x2 & y2); // выведет 4
// //В первом случае у нас два числа 2 и 5. 2 в двоичном виде представляет число 010, а 5 - 101.
// // Поразрядно умножим числа (0*1, 1*0, 0*1) и в итоге получим 000.
// //Во втором случае у нас вместо двойки число 4, у которого в первом разряде 1, так же как и у числа 5,
// // поэтому в итоге получим (1*1, 0*0, 0 *1) = 100, то есть число 4 в десятичном формате.


// //   |  (логическое сложение)  если в одном из числе 1, то 1 , иначе 0 -----------!!!!!!!!!!!!!!!!-------------
// int x1 = 2; //010
// int y1 = 5;//101
// Console.WriteLine(x1|y1); // выведет 7 - 111
// int x2 = 4; //100
// int y2 = 5;//101
// Console.WriteLine(x2 | y2); // выведет 5 - 101
// //Похоже на логическое умножение, операция также производится по двоичным разрядам,
// //но теперь возвращается единица, если хотя бы у одного числа в данном разряде имеется единица.


// //  ^ (логическое исключающее ИЛИ). Также эту операцию называют XOR. если числа разные, то 1, иначе 0 ------------!!!!!!!!!!!!!!!!------------
// int x = 45; // Значение, которое надо зашифровать - в двоичной форме 101101
// int key = 102; //Пусть это будет ключ - в двоичной форме 1100110

// int encrypt = x ^ key; //Результатом будет число 1001011 или 75
// Console.WriteLine($"Зашифрованное число: {encrypt}") ;

// int decrypt = encrypt ^ key; // Результатом будет исходное число 45
// Console.WriteLine($"Расшифрованное число: {decrypt}");

// Представление отрицательных чисел
int x = 12;
int y = ~x;
y = y + 1;  //  -12
Console.WriteLine(y);   // -12
Console.WriteLine(Convert.ToString(y, 2)); // Выводит вконсоль y в двичной системе. //  11111111111111111111111111110100

int[] integers = {
    12, -13, 243, 4, 16, -7, -1, 13, 14
};

Array.Sort(integers);

Console.WriteLine($"" +
    $"{"i",4}\t" +
    $"{"~i",4}\t" +
    $"{"~i+1",4}\t" +
    $"{"i (binary)",32}\t" +
    $"{"~i (binary)",32}\t" +
    $"{"~i+1 (binary)",32}\n");

for (int i = 0; i < integers.Length; i++)
{
    Console.WriteLine($"" +
        $"{integers[i],4}\t" +
        $"{InverseCode(integers[i]),4}\t" +
        $"{AdditionalCode(integers[i]),4}\t" +
        $"{ConvertToBinaryFormatted(integers[i]),32}\t" +
        $"{ConvertToBinaryFormatted(InverseCode(integers[i])),32}\t" +
        $"{ConvertToBinaryFormatted(AdditionalCode(integers[i])),32}");
}

static bool isPositive(int number)
{
    return number >= 0;
}

static int InverseCode(int number)
{
    if (isPositive(number))
        return number;

    return ~number;
}

static int AdditionalCode(int number)
{
    if (isPositive(number))
        return number;

    return InverseCode(number) + 1;
}

static string ConvertToBinaryFormatted(int number)
{
    return Convert.ToString(number, 2).PadLeft(32, '0');
}

// Тема глубокая. Стоит вернуться снова  https://metanit.com/sharp/tutorial/2.22.php

